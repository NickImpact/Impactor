/*
 * This file is part of Impactor, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2018-2022 NickImpact
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

package net.impactdev.impactor.sponge;

import com.google.inject.Injector;
import net.impactdev.impactor.api.Impactor;
import net.impactdev.impactor.api.dependencies.classpath.ClassPathAppender;
import net.impactdev.impactor.api.logging.PluginLogger;
import net.impactdev.impactor.api.scheduler.SchedulerAdapter;
import net.impactdev.impactor.common.plugin.ImpactorBootstrap;
import net.impactdev.impactor.common.plugin.classpath.JarInJarClassPathAppender;
import net.impactdev.impactor.launcher.LauncherBootstrap;
import net.impactdev.impactor.sponge.launcher.LaunchParameters;
import net.impactdev.impactor.sponge.logging.SpongeLogger;
import net.impactdev.impactor.sponge.scheduler.SpongeSchedulerAdapter;
import org.spongepowered.api.Game;
import org.spongepowered.api.Platform;
import org.spongepowered.api.Sponge;
import org.spongepowered.plugin.PluginContainer;
import org.spongepowered.plugin.metadata.PluginMetadata;

import java.nio.file.Path;
import java.util.function.Supplier;

public class SpongeImpactorBootstrap implements ImpactorBootstrap, LauncherBootstrap {

    /** The launcher responsible for invoking the bootstrapper */
    private final Supplier<Injector> loader;

    /** The plugin instance */
    private final SpongeImpactorPlugin plugin;

    /** The container for the plugin generated by Sponge */
    private final PluginContainer pluginContainer;

    /** The logger for the plugin instance */
    private final PluginLogger logger;

    /** The scheduler adapter responsible for scheduled tasks on the Sponge platform */
    private final SpongeSchedulerAdapter scheduler;

    /** The class path appender the plugin will use for runtime downloaded libraries */
    private final ClassPathAppender appender;

    private final Path configDirectory;

    public SpongeImpactorBootstrap(LaunchParameters parameters) {
        this.loader = parameters.loader();

        Injector injector = loader.get();
        Game game = injector.getInstance(Game.class);

        this.pluginContainer = injector.getInstance(PluginContainer.class);
        this.logger = new SpongeLogger(injector.getInstance(org.apache.logging.log4j.Logger.class));
        this.scheduler = new SpongeSchedulerAdapter(game, this.pluginContainer);
        this.appender = new JarInJarClassPathAppender(this.getClass().getClassLoader());
        this.plugin = new SpongeImpactorPlugin(this);

        this.configDirectory = parameters.configDirectory();
    }

    @Override
    public void construct() {
        this.logger.info("Loading Impactor @version@");
        this.plugin.construct();
    }

    @Override
    public void shutdown() {
        this.plugin.shutdown();
    }

    public void registerListener(Object object) {
        Sponge.game().eventManager().registerListeners(this.container(), object);
    }

    @Override
    public PluginLogger logger() {
        return this.logger;
    }

    @Override
    public Path configDirectory() {
        return this.configDirectory;
    }

    @Override
    public SchedulerAdapter scheduler() {
        return this.scheduler;
    }

    @Override
    public ClassPathAppender appender() {
        return this.appender;
    }

    public PluginContainer container() {
        return this.pluginContainer;
    }

    @Override
    public String version() {
        return this.pluginContainer.metadata().version().toString();
    }

    @Override
    public String serverBrand() {
        PluginMetadata brandMetadata = Sponge.game().platform().container(Platform.Component.IMPLEMENTATION).metadata();
        return brandMetadata.name().orElseGet(brandMetadata::id);
    }

    @Override
    public String serverVersion() {
        PluginMetadata api = Sponge.game().platform().container(Platform.Component.API).metadata();
        PluginMetadata impl = Sponge.game().platform().container(Platform.Component.IMPLEMENTATION).metadata();
        return api.name().orElse("API") + ": " + api.version() + " - " + impl.name().orElse("Impl") + ": " + impl.version();
    }
}
