/*
 * This file is part of Impactor, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2018-2022 NickImpact
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

package net.impactdev.impactor.common.ui.pagination.types;

import net.impactdev.impactor.api.Impactor;
import net.impactdev.impactor.api.ui.containers.icons.Icon;
import net.impactdev.impactor.api.ui.containers.layouts.Layout;
import net.impactdev.impactor.api.ui.containers.pagination.Pagination;
import net.impactdev.impactor.api.ui.containers.pagination.components.Page;
import net.impactdev.impactor.api.ui.containers.pagination.components.TimeoutDetails;
import net.impactdev.impactor.api.utilities.lists.CircularLinkedList;
import net.impactdev.impactor.common.ui.pagination.builders.ImpactorPaginationBuilder;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public abstract class AbstractAsynchronousPagination extends AbstractPagination implements Pagination {

    protected final CompletableFuture<? extends List<? extends Icon<?>>> accumulator;
    protected final Icon<?> waiting;
    protected final TimeoutDetails timeout;

    public AbstractAsynchronousPagination(
            ImpactorPaginationBuilder builder,
            CompletableFuture<? extends List<? extends Icon<?>>> accumulator,
            @Nullable Icon<?> waiting,
            @Nullable TimeoutDetails timeout
    ) {
        super(builder);

        this.accumulator = accumulator;
        this.waiting = this.provide(waiting, this.waitingIfNotSet());
        this.timeout = this.provide(timeout, new TimeoutDetails(this.timeoutIfNotSet(), 5, TimeUnit.SECONDS));
    }

    @Override
    public boolean set(@Nullable Icon<?> icon, int slot) {
        if(!this.within(slot)) {
            this.setUnsafe(icon, slot);
            return true;
        }

        return false;
    }

    protected abstract void queue();

    /**
     * Calculates the pages that will be defined based on the result of the future.
     *
     * @param icons The list of icons generated by the accumulator
     * @return A set of pages managed by a {@link CircularLinkedList}
     */
    protected abstract CircularLinkedList<Page<?>> define(List<? extends Icon<?>> icons);

    /**
     * Fills the content zone with the given icon. This overwrites whatever is within
     * the content zone regardless of actual pagination content, a previous fill, or
     * simply an unset slot.
     *
     * @param icon The icon to fill the zone with.
     */
    protected Layout fill(Icon<?> icon) {
        return Layout.builder()
                .from(this.layout())
                .rectangle(
                        icon,
                        this.zone(),
                        this.offsets(),
                        false
                )
                .build();
    }

    /**
     * Places an icon at the target slot, but ignores the rules of setting icons within
     * the content zone. By default, {@link #set(Icon, int)} should consider the bounds
     * of the content zone, and disallow setting of icons within that territory, in favor
     * of the actual pagination content. This call is provided outside of the interface
     * as this should only be handled by the implementation.
     *
     * @param icon The icon to set at the target slot
     * @param slot The slot to place the icon at
     */
    protected abstract void setUnsafe(Icon<?> icon, int slot);

    /**
     * If not set, provide an icon that will act as the waiting display to the client
     * within the view.
     *
     * @return The icon to represent the waiting state
     */
    protected abstract Icon<?> waitingIfNotSet();

    /**
     * If not set, provide an icon that will act as the timeout display to the client
     * within the view.
     *
     * @return The icon to represent the timeout state
     */
    protected abstract Icon<?> timeoutIfNotSet();

    protected  <W> CompletableFuture<W> timeoutAfter(long timeout, TimeUnit unit) {
        CompletableFuture<W> result = new CompletableFuture<>();
        Impactor.getInstance().getScheduler().asyncLater(() -> result.completeExceptionally(new TimeoutException()), timeout, unit);
        return result;
    }

    private <T> T provide(@Nullable T value, T def) {
        return Optional.ofNullable(value).orElse(def);
    }


}
